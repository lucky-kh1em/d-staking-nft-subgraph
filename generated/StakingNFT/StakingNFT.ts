// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolRating(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get poolRarity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get nftAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class StakingNFT__getPoolsResultValue0Struct extends ethereum.Tuple {
  get divinerNFT(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get limit(): BigInt {
    return this[2].toBigInt();
  }

  get interestPerSecond(): BigInt {
    return this[3].toBigInt();
  }
}

export class StakingNFT__getPoolsByRarityResultValue0Struct extends ethereum.Tuple {
  get divinerNFT(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get limit(): BigInt {
    return this[2].toBigInt();
  }

  get interestPerSecond(): BigInt {
    return this[3].toBigInt();
  }
}

export class StakingNFT__nftsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }
}

export class StakingNFT__poolsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class StakingNFT extends ethereum.SmartContract {
  static bind(address: Address): StakingNFT {
    return new StakingNFT("StakingNFT", address);
  }

  PRECISION(): BigInt {
    let result = super.call("PRECISION", "PRECISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRECISION", "PRECISION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  amountOfRarity(): BigInt {
    let result = super.call("amountOfRarity", "amountOfRarity():(uint256)", []);

    return result[0].toBigInt();
  }

  try_amountOfRarity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountOfRarity",
      "amountOfRarity():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  amountOfRating(): BigInt {
    let result = super.call("amountOfRating", "amountOfRating():(uint256)", []);

    return result[0].toBigInt();
  }

  try_amountOfRating(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountOfRating",
      "amountOfRating():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  efficiencyWhenExhaust(): BigInt {
    let result = super.call(
      "efficiencyWhenExhaust",
      "efficiencyWhenExhaust():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_efficiencyWhenExhaust(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "efficiencyWhenExhaust",
      "efficiencyWhenExhaust():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPools(
    row: BigInt,
    col: BigInt
  ): Array<StakingNFT__getPoolsResultValue0Struct> {
    let result = super.call(
      "getPools",
      "getPools(uint256,uint256):((address,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(row),
        ethereum.Value.fromUnsignedBigInt(col)
      ]
    );

    return result[0].toTupleArray<StakingNFT__getPoolsResultValue0Struct>();
  }

  try_getPools(
    row: BigInt,
    col: BigInt
  ): ethereum.CallResult<Array<StakingNFT__getPoolsResultValue0Struct>> {
    let result = super.tryCall(
      "getPools",
      "getPools(uint256,uint256):((address,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(row),
        ethereum.Value.fromUnsignedBigInt(col)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<StakingNFT__getPoolsResultValue0Struct>()
    );
  }

  getPoolsByRarity(
    rarity: BigInt
  ): Array<StakingNFT__getPoolsByRarityResultValue0Struct> {
    let result = super.call(
      "getPoolsByRarity",
      "getPoolsByRarity(uint128):((address,uint256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(rarity)]
    );

    return result[0].toTupleArray<
      StakingNFT__getPoolsByRarityResultValue0Struct
    >();
  }

  try_getPoolsByRarity(
    rarity: BigInt
  ): ethereum.CallResult<
    Array<StakingNFT__getPoolsByRarityResultValue0Struct>
  > {
    let result = super.tryCall(
      "getPoolsByRarity",
      "getPoolsByRarity(uint128):((address,uint256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(rarity)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<StakingNFT__getPoolsByRarityResultValue0Struct>()
    );
  }

  getStamina(tokenId: BigInt): BigInt {
    let result = super.call("getStamina", "getStamina(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getStamina(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getStamina", "getStamina(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimeOutOfStamina(tokenId: BigInt): BigInt {
    let result = super.call(
      "getTimeOutOfStamina",
      "getTimeOutOfStamina(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getTimeOutOfStamina(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimeOutOfStamina",
      "getTimeOutOfStamina(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxStamina(): BigInt {
    let result = super.call("maxStamina", "maxStamina():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxStamina(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxStamina", "maxStamina():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nfts(param0: BigInt): StakingNFT__nftsResult {
    let result = super.call(
      "nfts",
      "nfts(uint256):(uint256,uint128,uint128,uint256,uint256,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new StakingNFT__nftsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBoolean()
    );
  }

  try_nfts(param0: BigInt): ethereum.CallResult<StakingNFT__nftsResult> {
    let result = super.tryCall(
      "nfts",
      "nfts(uint256):(uint256,uint128,uint128,uint256,uint256,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakingNFT__nftsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBoolean()
      )
    );
  }

  onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingReward(tokenId: BigInt): BigInt {
    let result = super.call(
      "pendingReward",
      "pendingReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_pendingReward(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingReward",
      "pendingReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pools(param0: BigInt, param1: BigInt): StakingNFT__poolsResult {
    let result = super.call(
      "pools",
      "pools(uint128,uint128):(address,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new StakingNFT__poolsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_pools(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<StakingNFT__poolsResult> {
    let result = super.tryCall(
      "pools",
      "pools(uint128,uint128):(address,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakingNFT__poolsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  staminaRecoveryPerSecond(): BigInt {
    let result = super.call(
      "staminaRecoveryPerSecond",
      "staminaRecoveryPerSecond():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_staminaRecoveryPerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "staminaRecoveryPerSecond",
      "staminaRecoveryPerSecond():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddPoolCall extends ethereum.Call {
  get inputs(): AddPoolCall__Inputs {
    return new AddPoolCall__Inputs(this);
  }

  get outputs(): AddPoolCall__Outputs {
    return new AddPoolCall__Outputs(this);
  }
}

export class AddPoolCall__Inputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }

  get poolsInfo(): Array<AddPoolCallPoolsInfoStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      AddPoolCallPoolsInfoStruct
    >();
  }
}

export class AddPoolCall__Outputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }
}

export class AddPoolCallPoolsInfoStruct extends ethereum.Tuple {
  get divinerNFT(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get limit(): BigInt {
    return this[2].toBigInt();
  }

  get interestPerSecond(): BigInt {
    return this[3].toBigInt();
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get poolRating(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolRarity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class InCaseTokenStuckCall extends ethereum.Call {
  get inputs(): InCaseTokenStuckCall__Inputs {
    return new InCaseTokenStuckCall__Inputs(this);
  }

  get outputs(): InCaseTokenStuckCall__Outputs {
    return new InCaseTokenStuckCall__Outputs(this);
  }
}

export class InCaseTokenStuckCall__Inputs {
  _call: InCaseTokenStuckCall;

  constructor(call: InCaseTokenStuckCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get balance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InCaseTokenStuckCall__Outputs {
  _call: InCaseTokenStuckCall;

  constructor(call: InCaseTokenStuckCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAmountOfRarityCall extends ethereum.Call {
  get inputs(): SetAmountOfRarityCall__Inputs {
    return new SetAmountOfRarityCall__Inputs(this);
  }

  get outputs(): SetAmountOfRarityCall__Outputs {
    return new SetAmountOfRarityCall__Outputs(this);
  }
}

export class SetAmountOfRarityCall__Inputs {
  _call: SetAmountOfRarityCall;

  constructor(call: SetAmountOfRarityCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAmountOfRarityCall__Outputs {
  _call: SetAmountOfRarityCall;

  constructor(call: SetAmountOfRarityCall) {
    this._call = call;
  }
}

export class SetAmountOfRatingCall extends ethereum.Call {
  get inputs(): SetAmountOfRatingCall__Inputs {
    return new SetAmountOfRatingCall__Inputs(this);
  }

  get outputs(): SetAmountOfRatingCall__Outputs {
    return new SetAmountOfRatingCall__Outputs(this);
  }
}

export class SetAmountOfRatingCall__Inputs {
  _call: SetAmountOfRatingCall;

  constructor(call: SetAmountOfRatingCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAmountOfRatingCall__Outputs {
  _call: SetAmountOfRatingCall;

  constructor(call: SetAmountOfRatingCall) {
    this._call = call;
  }
}

export class SetEfficiencyWhenExhaustCall extends ethereum.Call {
  get inputs(): SetEfficiencyWhenExhaustCall__Inputs {
    return new SetEfficiencyWhenExhaustCall__Inputs(this);
  }

  get outputs(): SetEfficiencyWhenExhaustCall__Outputs {
    return new SetEfficiencyWhenExhaustCall__Outputs(this);
  }
}

export class SetEfficiencyWhenExhaustCall__Inputs {
  _call: SetEfficiencyWhenExhaustCall;

  constructor(call: SetEfficiencyWhenExhaustCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetEfficiencyWhenExhaustCall__Outputs {
  _call: SetEfficiencyWhenExhaustCall;

  constructor(call: SetEfficiencyWhenExhaustCall) {
    this._call = call;
  }
}

export class SetMaxStaminaCall extends ethereum.Call {
  get inputs(): SetMaxStaminaCall__Inputs {
    return new SetMaxStaminaCall__Inputs(this);
  }

  get outputs(): SetMaxStaminaCall__Outputs {
    return new SetMaxStaminaCall__Outputs(this);
  }
}

export class SetMaxStaminaCall__Inputs {
  _call: SetMaxStaminaCall;

  constructor(call: SetMaxStaminaCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxStaminaCall__Outputs {
  _call: SetMaxStaminaCall;

  constructor(call: SetMaxStaminaCall) {
    this._call = call;
  }
}

export class SetRewardTokenCall extends ethereum.Call {
  get inputs(): SetRewardTokenCall__Inputs {
    return new SetRewardTokenCall__Inputs(this);
  }

  get outputs(): SetRewardTokenCall__Outputs {
    return new SetRewardTokenCall__Outputs(this);
  }
}

export class SetRewardTokenCall__Inputs {
  _call: SetRewardTokenCall;

  constructor(call: SetRewardTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardTokenCall__Outputs {
  _call: SetRewardTokenCall;

  constructor(call: SetRewardTokenCall) {
    this._call = call;
  }
}

export class SetStaminaRecoveryPerSecondCall extends ethereum.Call {
  get inputs(): SetStaminaRecoveryPerSecondCall__Inputs {
    return new SetStaminaRecoveryPerSecondCall__Inputs(this);
  }

  get outputs(): SetStaminaRecoveryPerSecondCall__Outputs {
    return new SetStaminaRecoveryPerSecondCall__Outputs(this);
  }
}

export class SetStaminaRecoveryPerSecondCall__Inputs {
  _call: SetStaminaRecoveryPerSecondCall;

  constructor(call: SetStaminaRecoveryPerSecondCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStaminaRecoveryPerSecondCall__Outputs {
  _call: SetStaminaRecoveryPerSecondCall;

  constructor(call: SetStaminaRecoveryPerSecondCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get poolRating(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolRarity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get poolInfo(): UpdatePoolCallPoolInfoStruct {
    return changetype<UpdatePoolCallPoolInfoStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class UpdatePoolCallPoolInfoStruct extends ethereum.Tuple {
  get divinerNFT(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get limit(): BigInt {
    return this[2].toBigInt();
  }

  get interestPerSecond(): BigInt {
    return this[3].toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
